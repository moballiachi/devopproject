name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - testing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Set ENVIRONMENT_NAME variable
        run: echo "ENVIRONMENT_NAME=$(if [ '${{ github.ref }}' == 'refs/heads/develop' ]; then echo 'Develop'; else echo 'Testing'; fi)" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t env-webapp .

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: env-webapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag env-webapp:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: env-webapp-cluster
          service: env-webapp-service
          file: ecs-task-definition.json
          region: ${{ secrets.AWS_REGION }}
          image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG