name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - testing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
      AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
      AWS_VPC_SUBNET: ${{ secrets.AWS_VPC_SUBNET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Set ENVIRONMENT_NAME variable
        run: echo "ENVIRONMENT_NAME=$(if [ '${{ github.ref }}' == 'refs/heads/develop' ]; then echo 'Develop'; else echo 'Testing'; fi)" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t env-webapp .

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names env-webapp --region $AWS_REGION || aws ecr create-repository --repository-name env-webapp --region $AWS_REGION

      - name: Activate ECS Cluster if not active
        run: |
          clusterStatus=$(aws ecs describe-clusters --cluster env-webapp-cluster --query 'clusters[0].status' --output text --region $AWS_REGION 2>/dev/null || echo "NOTFOUND")
          if [[ $clusterStatus == "NOTFOUND" ]]; then
            aws ecs create-cluster --cluster-name env-webapp-cluster --region $AWS_REGION
            aws ecs wait cluster-active --clusters env-webapp-cluster --region $AWS_REGION
          elif [[ $clusterStatus == "INACTIVE" ]]; then
            aws ecs wait cluster-active --clusters env-webapp-cluster --region $AWS_REGION
          fi
        shell: /usr/bin/bash -e {0}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENVIRONMENT_NAME: Develop
          
      - name: Create ECS Cluster if not exists
        run: |
          aws ecs create-cluster --cluster-name env-webapp-cluster --region $AWS_REGION

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: env-webapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag env-webapp:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set Environment Variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "ENVIRONMENT_NAME=Develop" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/testing" ]; then
            echo "ENVIRONMENT_NAME=Testing" >> $GITHUB_ENV
          fi

      - name: Register ECS task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family env-webapp-task-definition \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --container-definitions '[
              {
                "name": "env-webapp",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.sa-east-1.amazonaws.com/env-webapp:${{ github.sha }}",
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "hostPort": 8080
                  }
                ],
                "essential": true,
                "environment": [
                  {
                    "name": "ENVIRONMENT_NAME",
                    "value": "${{ env.ENVIRONMENT_NAME }}"
                  }
                ]
              }
            ]' \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create or Update CodeDeploy Application
        run: |
          aws deploy create-application --application-name env-webapp-codedeploy-app --compute-platform ECS || true

      - name: Create or Update CodeDeploy Deployment Group
        run: |
          aws deploy create-deployment-group \
            --application-name env-webapp-codedeploy-app \
            --deployment-group-name env-webapp-deployment-group \
            --service-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CodeDeployServiceRole \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --ecs-services clusterName=env-webapp-cluster,serviceName=env-webapp-service \
            --load-balancer-info "targetGroupInfoList=[{name=env-webapp-target-group}]" \
            --blue-green-deployment-configuration "terminateBlueInstancesOnDeploymentSuccess={action=TERMINATE,terminationWaitTimeInMinutes=5},deploymentReadyOption={actionOnTimeout=CONTINUE_DEPLOYMENT},greenFleetProvisioningOption={action=COPY_AUTO_SCALING_GROUP,greenFleetProvisioningTimeoutInMinutes=60}" \
            --deployment-style "deploymentType=BLUE_GREEN,deploymentOption=WITH_TRAFFIC_CONTROL" \
            --region $AWS_REGION || true
        shell: /usr/bin/bash -e {0}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENVIRONMENT_NAME: Develop
          TASK_DEF_ARN: $TASK_DEF_ARN
            
      - name: Deploy to ECS
        run: |
          aws ecs run-task \
            --cluster env-webapp-cluster \
            --task-definition $TASK_DEF_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${AWS_VPC_SUBNET}],securityGroups=[$AWS_SECURITY_GROUP],assignPublicIp=ENABLED}" \
            --region $AWS_REGION
        shell: /usr/bin/bash -e {0}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENVIRONMENT_NAME: Develop

      - name: Get Public IP
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster env-webapp-cluster --query 'taskArns[0]' --output text --region $AWS_REGION)
          ENI_ID=$(aws ecs describe-tasks --cluster env-webapp-cluster --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text --region $AWS_REGION)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text --region $AWS_REGION)
          echo "Task Public IP: $PUBLIC_IP:8080"
          echo "TASK_PUBLIC_IP=$PUBLIC_IP:8080" >> $GITHUB_ENV
          